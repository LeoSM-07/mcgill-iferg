/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Question = {
  _type: "question";
  question: string;
  answer: Array<
    | {
        children?: Array<
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
          | ({
              _key: string;
            } & Latex)
        >;
        style?: "normal";
        listItem?: never;
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | ({
        _key: string;
      } & Latex)
  >;
};

export type FaqSection = {
  _id: string;
  _type: "faqSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  part: number;
  questions: Array<
    {
      _key: string;
    } & Question
  >;
};

export type Publication = {
  _id: string;
  _type: "publication";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  type: "journal" | "conference";
  publishDate: string;
  citation?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  pdfFile: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  portrait?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  title: string;
  status: "present" | "past";
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  links?: {
    email?: string;
    linkedin?: string;
    gitHub?: string;
    twitter?: string;
  };
};

export type Latex = {
  _type: "latex";
  body?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height: number;
  width: number;
  aspectRatio: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x: number;
  y: number;
  height: number;
  width: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top: number;
  bottom: number;
  left: number;
  right: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Question
  | FaqSection
  | Publication
  | Person
  | Latex
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: allPeopleQuery
// Query: {  "higgins": *[    _type == "person" && name == "Andrew Higgins"  ][0],  "current": *[    _type == "person" &&    status == "present" &&    name != "Andrew Higgins"  ] | order(string::split(name, " ")[-1] asc),  "past": *[    _type == "person" &&    status == "past" &&    name != "Andrew Higgins"  ] | order(string::split(name, " ")[-1] asc)}
export type AllPeopleQueryResult = {
  higgins: {
    _id: string;
    _type: "person";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    portrait?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    title: string;
    status: "past" | "present";
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    links?: {
      email?: string;
      linkedin?: string;
      gitHub?: string;
      twitter?: string;
    };
  } | null;
  current: Array<{
    _id: string;
    _type: "person";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    portrait?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    title: string;
    status: "past" | "present";
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    links?: {
      email?: string;
      linkedin?: string;
      gitHub?: string;
      twitter?: string;
    };
  }>;
  past: Array<{
    _id: string;
    _type: "person";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    portrait?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    title: string;
    status: "past" | "present";
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    links?: {
      email?: string;
      linkedin?: string;
      gitHub?: string;
      twitter?: string;
    };
  }>;
};
// Variable: allPapersQuery
// Query: {  "conference": *[    _type == "publication" && type == "conference"  ] | order(publishDate desc) {    title,    type,    publishDate,    citation,    "pdfUrl": pdfFile.asset->url  },  "journal": *[    _type == "publication" && type == "journal"  ] | order(publishDate desc) {    title,    type,    publishDate,    citation,    "pdfUrl": pdfFile.asset->url  }}
export type AllPapersQueryResult = {
  conference: Array<{
    title: string;
    type: "conference" | "journal";
    publishDate: string;
    citation: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    pdfUrl: string | null;
  }>;
  journal: Array<{
    title: string;
    type: "conference" | "journal";
    publishDate: string;
    citation: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    pdfUrl: string | null;
  }>;
};
// Variable: allFaqSectionsQuery
// Query: *[_type == "faqSection"] | order(part asc)
export type AllFaqSectionsQueryResult = Array<{
  _id: string;
  _type: "faqSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  part: number;
  questions: Array<
    {
      _key: string;
    } & Question
  >;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n{\n  "higgins": *[\n    _type == "person" && name == "Andrew Higgins"\n  ][0],\n\n  "current": *[\n    _type == "person" &&\n    status == "present" &&\n    name != "Andrew Higgins"\n  ] | order(string::split(name, " ")[-1] asc),\n\n  "past": *[\n    _type == "person" &&\n    status == "past" &&\n    name != "Andrew Higgins"\n  ] | order(string::split(name, " ")[-1] asc)\n}\n\t\t': AllPeopleQueryResult;
    '\n{\n  "conference": *[\n    _type == "publication" && type == "conference"\n  ] | order(publishDate desc) {\n    title,\n    type,\n    publishDate,\n    citation,\n    "pdfUrl": pdfFile.asset->url\n  },\n\n  "journal": *[\n    _type == "publication" && type == "journal"\n  ] | order(publishDate desc) {\n    title,\n    type,\n    publishDate,\n    citation,\n    "pdfUrl": pdfFile.asset->url\n  }\n}\n  ': AllPapersQueryResult;
    '*[_type == "faqSection"] | order(part asc)': AllFaqSectionsQueryResult;
  }
}
